// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String
  needPasswordChange Boolean        @default(true)
  role               UserRole
  status             UserStatus     @default(NORMAL)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  FoodPost           FoodPost[]
  Comment            Comment[]
  Vote               Vote[]
  Rating             Rating[]
  Subscription       Subscription[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  NORMAL
  PREMIUM
}

model FoodPost {
  id           String     @id @default(uuid())
  title        String
  description  String
  priceRange   Int
  location     String
  image        String
  status       PostStatus @default(PENDING)
  isPremium    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  approvedBy   String?
  approvedAt   DateTime?
  approvalNote String?
  postedBy     User       @relation(fields: [postedById], references: [id])
  postedById   String
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String
  comments     Comment[]
  votes        Vote[]
  ratings      Rating[]

  @@map("food_posts")
}

model Category {
  id    String     @id @default(uuid())
  name  String     @unique
  posts FoodPost[]

  @@map("categories")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      FoodPost @relation(fields: [postId], references: [id])
  postId    String
  isDeleted Boolean  @default(false)

  @@map("comments")
}

model Vote {
  id     String   @id @default(uuid())
  type   VoteType
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   FoodPost @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
  @@map("votes")
}

model Rating {
  id     String   @id @default(uuid())
  value  Int
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   FoodPost @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
  @@map("ratings")
}

model Subscription {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  paymentMethod PaymentGateway
  paymentId     String
  isActive      Boolean        @default(true)
  startedAt     DateTime       @default(now())
  expiresAt     DateTime

  @@unique([userId, isActive])
  @@map("subscriptions")
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum PaymentGateway {
  SSLCommerz
  ShurjoPay
}
